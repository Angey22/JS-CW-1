//! Видео - 51:50...1:23:30

/*
* - Парсинг числа с Namber.parsInt() и Namber.parsFloat()
*/

// Namber.parsInt() - с лева на прово 'парсит' переменную и возвращает значение целого числа, если целые числа присутствуют в соответствующей переменной. Если целых чисел нет, или в начале значения переменной стоит не число, а символ - то выдает "NaN" (символ точки "." - не воспринимает, и считает его НЕ числом)

// Простой парсинг значения переменной
console.groupCollapsed('"Number.parseInt()"'); //! Название группы

let elementWidth = '50px';
const result = Number.parseInt(elementWidth);
console.log(typeof result, result); // => number 50

// Парсинг значения переменной "elementWidth" с последующим переопределением значения этой переменной с текстового формата '50px' на число '50px'
elementWidth = Number.parseInt(elementWidth);
console.log('elementWidth:', elementWidth); // => elementWidth: 50

console.groupEnd(); //! Закрываем группу
console.log('-1----------------------------------------------');

// Namber.parsFloat() - работает так же, как и Namber.parsInt(), но при этом - включает в поиск символ точки - ".", и все цыфры стоящие после нее.
console.groupCollapsed('"Number.parseFloat()"'); //! Название группы

let elementHeight = '200.74px';
elementHeight = Number.parseFloat(elementHeight);
console.log('elementHeight:', elementHeight);

console.groupEnd(); //! Закрываем группу
console.log('-2----------------------------------------------');


/*
* - Метод для "отсекания" от числа - 'число.toFixed()'
*/

// Предназначен для "отсекания" (НЕ округления) "ненужного" остатка числа, после точки в десятичной дроби. Позволяет указать - сколько знаков после точки остается.
console.groupCollapsed('"число.toFixed()"'); //! Название группы

// Пример использования
let salary = 1300.16472;
console.log('Перед отсечением "ненужного":', salary);
salary = salary.toFixed(2);
console.log('После отсечением "ненужного" (строка):', salary);
// Важной особенностью использования данного метода является то, что он возвращает - стороку, т.е. берет число, переводит его в строку и уже от строки - отсекает соответствующее количество символов "ненужного".

// Для перевода значения строки в число - используем метод 'Number()'
salary = Number(salary);
console.log('Преобразование в число:', salary);

// Пример записи выше написаных 2-х строк кода, в одну строку - по методу "Матрешки"
console.log('Преобразование в число (матрешка):', Number(salary.toFixed(2)));

console.groupEnd(); //! Закрываем группу
console.log('-3----------------------------------------------');


/*
* - Приведение (преобразование) к числу с "Namber(value)"
* - Значение NaN (Nat a Number) и метод Number.isNaN(valur)
*/
let quantiti = '30';
let value = 'Эту строку невозможно привести к числу';

console.groupCollapsed('Приведение (преобразование) к числу с "Namber(value)"'); //! Название группы

// Примеры приобразования строчных численных символов и булевских значений в число, с помощью метода "Namber(value)"
console.log('Прямой ввод ->', Number('5')); // => чисо 5
console.log('Прямой ввод ->', Number(true)); // => чисо 1
console.log('Прямой ввод ->', Number(false)); // => чисо 0
console.log('Прямой ввод ->', Number('hgrdtjrxyrx')); // => NaN

console.log('Через переменную "quantiti" ->', Number(quantiti)); // => число 30
console.log('Через переменную "value" ->', Number(value)); // => NaN

// В JS 'МОЖНО' выполнять операцию деления на "0", НО - при этом, результат такого деления будет всегда служебное значение - 'infinity' (бесконечность).
console.log('Делем на "0" ->', Number(5 / 0)); // => infinity

console.groupEnd(); //! Закрываем группу
console.log('-4----------------------------------------------');


// Метод "Number.isNaN(value)" предназначен для определения значения "NaN". При его использовании возвращается булевское значение: 'true' - если проверяемое значение в переменной или введенное является "NaN"; 'false' - если проверяемое значение - НЕ "NaN".
let ImNaN = NaN;

console.groupCollapsed('Метод "Number.isNaN(value)"'); //! Название группы

// Примеры 'false'
console.log('"Number.isNaN(quantiti)" ->', Number.isNaN(quantiti)); // => false
console.log('"Number.isNaN(value)" ->', Number.isNaN(value)); // => false
console.log(`"Number.isNaN('xfgxfgnfgn')" ->`, Number.isNaN('xfgxfgnfgn')); // => false
console.log('" Number.isNaN(7)" ->', Number.isNaN(7)); // => false
console.log('" Number.isNaN(5 / 0)" ->', Number.isNaN(5 / 0)); // => false

// Примеры 'true'
console.log('"Number.isNaN(NaN)" ->', Number.isNaN(NaN)); // => true
console.log('"Number.isNaN(ImNaN)" ->', Number.isNaN(ImNaN)); // => true

console.groupEnd(); //! Закрываем группу
console.log('-5----------------------------------------------');


/*
* Объект 'Math' - набор свойств, методов и функций для выполнения матиматических операций и специальных матиматических вычислений
* - Возведение в степень
* - Exponent operator
*/
console.groupCollapsed('Объект "Math"'); //! Название группы

// Команда, которая выводит в консоль - перечень всех возможных свойств, методов и функций, которые заложены в функционал объекта 'Math'
console.log(Math);

// Пример вывода числи "Пи"
console.log('"Math.PI" ->', Math.PI); // => 3.141592653589793

// Пример извлечения квадратного корня c помощью функции 'Math.sqrt()'.
//! Пример с прямым вводом одного числа (144), из которого нужно извлечь корень
const result1 = Math.sqrt(144);
console.log('"Math.sqrt(144)" ->', result1); // => число 12

//! Пример с вводом переменной с числом, из которого нужно извлечь корень
const base1 = 144;
console.log('"Math.sqrt(base1)" ->', Math.sqrt(base1)); // => число 12


// Пример возведения числа в степень c помощью функции 'Math.pow()'. Внутри которой первое число или переменна - базовое значение, а второе - значение степени Math.pow('базовое значение', 'значение степени')

//! Пример с прямым вводом чисел
const result2 = Math.pow(2, 3);
console.log('"Math.pow(2, 3)" ->', result2); // => число 8

//! Пример с использованием переменных
const base2 = 2;
const power2 = 5;
const result3 = Math.pow(base2, power2);
console.log('"Math.pow(base2, power2)" ->', result3); // => число 32

// Пример возведения числа в экспаненту с помощь служебного символьного значения "**" (двух звездочек) и прямого ввода чисел
console.log('"2 ** 5" ->', 2 ** 5); // => число 32

// Пример возведения числа в экспаненту с помощь служебного символьного значения "**" (двух звездочек) и ввода чисел через переменные
console.log('"base2 ** power2" ->', base2 ** power2); // => число 32

console.groupEnd(); //! Закрываем группу
console.log('-6----------------------------------------------');


/*
* Напиши скрипт который попросит пользователя ввести число и степень,
* возводит число в эту степень и выводит результат в консоль
*/
console.groupCollapsed('Скрипт "Возведение числа в степень"'); //! Название группы

//! Состовляем общее описание алгоритма скрипта:
// 1. Нужно попросить пользователя ввести число, а введенное им число сохранить в переменную;
// 2. Нужно попросить пользователя ввести степень, в которую необходимо возвести ранее введенное им число, и сохранить значение этой степени в переменную;
// 3. Осуществить операцию возведения в нужную степень соответствующего числа и вывести результат в консоль

//! Пишем код скрипта
// 1-й шаг
// let base = prompt('Введите число'); // Просим у пользователя ввести число
// base = Number(base); // Преобразовываем введенное пользователем значение из строки в число
// console.log('Число:', base); // Проверяем преобразования полученного значения в число

// 2-й шаг
// let power = prompt('Введите степень'); // Просим у пользователя ввести степень
// power = Number(power); // Преобразовываем введенное пользователем значение из строки в число
// console.log('Степень:', power); // Проверяем преобразования полученного значения в число

// 3-й шаг
// const result4 = base ** power; // Проводим операцию возведения в степень
// console.log('Результат:', result4); // Выводим результат вычисления в консоль

console.groupEnd(); //! Закрываем группу
console.log('-7----------------------------------------------');


/*
* Генерим псевдо-случайные числа
* - Math.random()
* - Math.round()
*/
console.groupCollapsed('Метод "Math.random()"'); //! Название группы

// Метод 'Math.random()' - генерирует произвольное число в диапазоне от "0" до "1"
console.log('"Math.random()" ->', Math.random());

// Для того, чтобы задать 'Math.random()' диапазон чисел, в рамках которого необходимо выполнять генерацию случайного числа, необходимо использовать формулу:
// 'Math.random() * (max - min) + min',
// 'Math.random() * ([максимальное значение заданного диапазона] - [минимальное значение заданного диапазона]) + [минимальное значение заданного диапазона]'

//! Пример задачи диапозона генерации случайных чисел от 30 до 50, с прямым вводом значений
console.log('"Math.random() * (50 - 30) + 30" ->', Math.random() * (50 - 30) + 30);

//! Пример задачи диапозона генерации случайных чисел от 10 до 80, с использованием переменных
const min = 10;
const max = 80;
console.log('"Math.random() * (max - min) + min" ->', Math.random() * (max - min) + min);

console.groupEnd(); //! Закрываем группу
console.log('-8----------------------------------------------');


// 'Math.round()' - предназначен для округления
console.groupCollapsed('Метод "Math.round()"'); //! Название группы

console.log('"Math.round(0.3)" ->', Math.round(0.3)); // => 0
console.log('"Math.round(0.5)" ->', Math.round(0.5)); // => 1
console.log('"Math.round(1.4)" ->', Math.round(1.4)); // => 1
console.log('"Math.round(1.7)" ->', Math.round(1.7)); // => 2

// Совместное использование 'Math.random()' и 'Math.round()'
const result4 = Math.round(Math.random() * (max - min) + min);
console.log('"Math.round(Math.random() * (max - min) + min)" ->', result4); // => целое число в заданом диапазоне

console.groupEnd(); //! Закрываем группу
console.log('-9----------------------------------------------');


//! Пример скрипта с использованием вышеописанных методов 'Math.random()' и 'Math.round()':

const colors = ['tomato', 'teal', 'orange', 'deeppink', 'skyblue']; // Объявляем переменную 'colors' - масив, с перечнем служебных слов значений цвета.

const max1 = colors.length - 1; // Задаем максимальное значение
const min1 = 0; // Задаем минимальное значение

const index = Math.round(Math.random() * (max1 - min1) + min1); // Генерируем случайное число из заданого диапазона

const color = colors[index]; // Записываем в новую переменную цвет из указанного масива - набора цветов

// console.log('Текущий "background-color" страницы -> ', color); // Выводим в консоль полученный цвет //!!!

// Пишим инструкцию для присвоения "body" страницы - инлайнового стиля 'background-color', в котором цвет, должен соответствовать полученному и выведенному в консоле цвету
// document.body.style.backgroundColor = color; //!!!
