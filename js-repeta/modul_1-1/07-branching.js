//! Видео - 2:28:50...2:46:30

/*
* Оператор "if"
*/
console.groupCollapsed('Оператор "if"'); //! Название группы

// Предназначен для выполнения определенного кода по условию. Который состоит из 2-х основных частей: 1) условие оператора "if"; 2) "тела" функции, которое выполняется при выполнении - "условия оператора if". При этом, "условие оператора if" - это булевое значение, где "true" - соответствует выполнению "условия оператора if", а "false" - не выполнению.
// В упрощенном виде, оператор "if" работает по принципу: "если ДА (true) - выполняю тело", а "если НЕТ (false) - НЕ выполняю тело".

if ('abc') {
    // тело
    console.log(`При вводе значения "${'abc'}" в условие оператора "if", тело - выполненно!`);
}

if (0) {
    // тело
    console.log(`При вводе значения "${0}" в условие оператора "if", тело - НЕ выполненно!`);
}

if (5 > 3) {
    // тело
    console.log(`При вводе значения "5 > 3 => ${5 > 3}" в условие оператора "if", тело - выполненно!`);
}

if (5 > 30) {
    // тело
    console.log(`При вводе значения "5 > 30 => ${5 > 30}" в условие оператора "if", тело - НЕ выполненно!`);
}

console.groupEnd(); //! Закрываем группу
console.log('-1----------------------------------------------');


/*
* Оператор "if...else"
*/
console.groupCollapsed('Оператор "if...else"'); //! Название группы

// Оператор "if...else" работает по схожему с "if" принципу анализа полученного в условие булевого значения. При этом, отличием "if...else" от "if" является то, что у него 2-а тела. Первое из которых, срабатывает при "выполнении условия" (когда в условие - "true"), второе тело - при "НЕ выполнении условия" (когда в условие - "false").

if (1 < 2) {
    // 1-е тело
    console.log(`При вводе значения "1 < 2 => true" в условие оператора "if...else", выполняется 1-е тело`);
} else {
    // 2-е тело
    console.log(`Второе тело - НЕ выполняется!`);
}

if (1 > 2) {
    // 1-е тело
    console.log(`Первое тело - НЕ выполняется!`);
} else {
    // 2-е тело
    console.log(`При вводе значения "1 > 2 => false" в условие оператора "if...else", выполняется 2-е тело`);
}

console.groupEnd(); //! Закрываем группу
console.log('-2----------------------------------------------');


/*
* Оператор ветвления "else...if"
*/
console.groupCollapsed('Оператор "else...if"'); //! Название группы

// Оператор "else...if" отличается от предыдущих тем, что может включать в свою структуру бесконечное количество условий, при выполнении одного из которых - будет выполнено "тело" этого условия, которое - "true", а все остальные условия - будут пропущены. При этом, в конце оператора можно будет поставить "else", в теле которого - написать код, который нужно выполнить, если ни одно из условий оператора - НЕ выполнилось (т.е., все условия были - "false")

// Например, нам нужно определить условный уровень платежеспособности клиента, на основании того, что мы знаем какая у него з/п - "sallary"

const sallary = 1000; // з/п клиента

if (sallary <= 0) {
    // 1-е тело
    console.log(`1-е тело, выполнилось условие "sallary(${sallary}) <= 0", клиент - НЕ платежеспособный!`);
} else if (sallary < 200) {
    // 2-е тело
    console.log(`2-е тело, выполнилось условие "sallary(${sallary}) < 200", клиент - нищий!`);
} else if (sallary >= 200 && sallary < 500) {
    // 3-е тело
    console.log(`3-е тело, выполнилось условие "sallary(${sallary}) >= 200 и sallary(${sallary}) < 500", клиент - бедный.`);
} else if (sallary >= 500 && sallary < 1000) {
    // 4-е тело
    console.log(`4-е тело, выполнилось условие "sallary(${sallary}) >= 500 и sallary(${sallary}) < 1000", клиент - со скромными возможностями`);
} else if (sallary >= 1000 && sallary <= 1500) {
    // 5-е тело
    console.log(`5-е тело, выполнилось условие "sallary(${sallary}) >= 1000 и sallary(${sallary}) <= 1500", клиент - простой обыватель`);
} else if (sallary > 1500) {
    // 6-е тело
    console.log(`6-е тело, выполнилось условие "sallary(${sallary}) > 1500 - интересный персонаж`);
} else {
    // 7-е тело
    console.log(`"else", когда НЕ выполнилось ни одно из условий, клиент - не понятно кто или идиот, не умеющий вводить цыфры в переменную?!`);
}

// Отличительной чертой оператора "else...if" является то, что он по сути - представляет собой одну логическую цепочку, а не группу отдельных условий, не связанных структурно между собой. Его использование позволяет экономить время и ресурс для выполнения других операций, не тратя его попусту на проверку отдельных, не связанных между собой условий "if".

console.groupEnd(); //! Закрываем группу
console.log('-3----------------------------------------------');


/*
* Тернарный оператор
*/
console.groupCollapsed('Тернарный оператор'); //! Название группы

// Тернарный оператор - это упрощенная запись оператора "if...else", которая предназначена для уменьшения количества кода, при необходимости ввода в какую-то переменную одного из двух значений по условию. Данный оператор рекомендуется использовать именно для заполнения переменных, а не для других целей.
// Его используют только для простой записи логики "или" - "или".

// Например, в переменную "message" нужно записать (для последующего вывода пользователю) одно из двух сообщений: "Позитивный баланс" или "Негативный баланс". Которые будут выводится пользователю, в зависимости от того, сколько у него денег на счету: если денег на счету ">= 0" - 'Позитивный баланс', а во всех остальных случаях - 'Негативный баланс'. 

const balans = 1000;
let message;

// Решение задачи с помощью оператора "if...else"
if (balans >= 0) {
    message = "Позитивный баланс";
} else {
    message = "Негативный баланс";
}
console.log('Вывод сообщения после обработки "if...else" -', message);

// Решение задачи с помощью тернарного оператора
message = balans >= 0 ? "Позитивный баланс" : "Негативный баланс";
console.log('Вывод сообщения после обработки тернарным оператором -', message);

console.groupEnd(); //! Закрываем группу
console.log('-4----------------------------------------------');


/*
* Блочная область видимости переменных
*/
console.groupCollapsed('Область видимости переменных'); //! Название группы

// Все переменные объявленные внутри скрипта с помощью "const" или "let" подчиняются правилу - блочной области видимости. Если переменная НЕ вложина не в какую функцию или оператор, то ее "видят" и могут использовать все существующие в скрипте операторы, функции и т.д. Если же, какая-либо переменная была объявленна внутри тела оператора или функции (внутри скобок оператора или функции), то ее "видит" и может использовать ТОЛЬКО код, который находится внутри тела соответствующего оператора или функции, а все другие элементы скрипта (находящиеся за пределами разделительных скобок оператора или функции внутри которой была объявлена соответствующая переменная) - НЕ "видят" и НЕ могут использовать эту переменную.

// Переменные объявленные вне какой либо функции, оператора и т.д., называются - "глобальными переменными", и могут быть использованы в любых частях скрипта.

// Переменные объявленные внутри какой-либо функции или оператора, называются - "блочными", и могут быть использованы только внутри того блока (оператора, функции и т.д.), внутри которого они были объявлены.

const globalVariable = "Глобальная переменная";

if (true) {
    const blockVariable = "Блочнаяная переменная";
}

console.log(globalVariable);
// console.log(blockVariable);

// Важной особенностью блочных переменных является то, что в каждом блоке может быть как отдельно свой набор блочных переменных, так и однаковые блочные переменные использоваться в разных блоках. При этом, объявленные внутри блока переменные - не видны остальным частям скрипта, и при попытке обратится к ним за пределами соответствующего блока - будут вызывать ошибку, так как вне блока - "их НЕ существует".

console.groupEnd(); //! Закрываем группу
console.log('-5----------------------------------------------');